mongoDB 

- is a NoSQL Database
- no relational Database -> its a document database
- recommended, if there is one user generating many posts etc. like Instagram and so one..




REAL DATABASE SERVER
____________________

npm install --save mongodb

1. GO TO NORMAL WEBSITE AND REFRESH IP -> https://cloud.mongodb.com/v2/6376945c84680d511f6cba8f#security/network/accessList
1.1 Press RESUME and wait
2. CONNECT -> https://cloud.mongodb.com/v2/6376945c84680d511f6cba8f#clusters -> CONNECT BUTTON -> CONNECT WITH APP 
NOTE: access possibilities are changing by time due to the website
-> we need a code to connect like this: mongodb+srv://Tobias:<password>@cluster0.aisrby5.mongodb.net/


in app.js:

require("dotenv").config(); // accessing the secret keys


// MIDDLEWARES
app.use(express.json()); // for db communication & connection


create a .env file

ADD:

MONGODB_URL=mongodb+srv://Tobias:<password>@cluster0.aisrby5.mongodb.net/    NOTE: NO '' -> cause Key Value Pairs
->                                   ⬆️ FILL THIS OUT
->         =mongodb+srv://Tobias:XXXXXXXXX@cluster0.aisrby5.mongodb.net/
                         without the <> !!!

                                                                                        
3. CONNECT WITH MONGODB COMPASS -> THE APP 




BUILDING A CONNECTION
_____________________

app.js file:

const mongoConnectImport = require("./db/database.js"); // mongodb connection

mongoConnectImport((client) => {
  console.log(client);
  app.listen(3000);
});

db file:

const mongodb = require("mongodb");
const Client = mongodb.MongoClient;

const mongoConnect = (callback) => {
  Client.connect(
    "mongodb+srv://Tobias:GlGyWZKyJIVw7LXA@cluster0.aisrby5.mongodb.net/"
  )
    .then((client) => {
      console.log("CONNECTED");
      callback(client);
    })
    .catch((err) => {
      console.log(err);
    });
};

module.exports = mongoConnect;




          THEORY
          ______
      
- NoSQL Database is using COLLECTIONS
             |
          Documents
          { name: 'Max'. age: 28 }
          { name: 'Paul' }              => Documents with different structure in the same Document
          
- Does not have a strict Data Shema (No Structure required)
- No Data Relations


Horizontal vs Vertical Scaling

- NoSQL is really good with horizontal scaling




          LOCAL DATABASE
          ______________

Community Server      https://www.mongodb.com/try/download/community

1. npm install --save mongodb

2. const { MongoClient } = require('mongodb');


  in TERMINAL:
  
3. go to the correct PATH -> cd /usr/local/mongodb/bin

4. in the correct PATH where mongod is ---> sudo ./mongod --dbpath db/





          HOW TO INPUT -> STRORING IN DB -> DISPLAYING DATA FROM DB
          _________________________________________________________     
      
input get, input storing in database, input get/fetch from database

Fester 1: Input -> post req -> save() in db -> res 201

Fenster 2: Input -> get req -> find() in db -> return (data) + 200




          CRUD - DOCS Overview            
          ____________________

https://www.mongodb.com/docs/manual/crud/

depending on the problem, we use crud on the server (more automatic stufff like)
                    ... , we use crud with the terminal (more manual stuff like)


CREATE
db.collection.insertOne({}) -> will create One element
db.collection.insertMany({}) -> will create many element

READ                                lektion 329
db.collection.find()

UPDATE
db.collection.updateOne() -> will update one element
db.collection.updateMany() -> will update multiple elements

DELETE
db.collection('products').deleteOne();
db.collection('products').deleteMany({});


EXAMPLE:
dbOp = db.collection('prodcuts').updateOne({ _id: new mongodb.ObjectId(this._id) }, { $set: this });
                                                                                          ↑
                                                                                    DESCRIPE THE OPERATION we want to make
                                                                                    
                                                                                    
$set  The $set operator replaces the value of a field with the specified value.
$in   is a query operator -> Matches any of the values specified in an array.




          VALIDATION
          __________      
      
assert




          MONGOOSE
          ________

- Mongoose is the same for MongoDb like Sequelize for MySQL
- tries to enable to work with the data instead of the queries
- Is an ODM -> a Object-Document Mapping Library for mongoDb


app.js file:

require("./db/database"); // mongoose connection


db file:

const dbURL =
  "mongodb+srv://Tobias:GlGyWZKyJIVw7LXA@cluster0.aisrby5.mongodb.net/";
// require(db);

// NOTE we are using moongoose
// SETUP CONNECTION
const mongoose = require("mongoose");

mongoose
  .connect(dbURL)
  .then(() => console.log("CONNECTED"))
  .catch((err) => console.log(err));




_______________

1. Integration:

npm install mongoose

const mongoose = require('mongoose');

mongoose.connect('mongodb://127.0.0.1:27017/userDB', {useNewUrlParser: true});
mongoose.set('strictQuery', true);  // line from error warning


2. Creating a Schema

const Schema = mongoose.Schema;      // = a constructor

const productSchema = new Schema({      or      const productSchema = new mongoose.Schema({       // Schema Object 

  // we discribe the data-schema, how the product should look like -> with key-value pairs!
  // KEYS  TYPE  (= PAIR)
  // ↓      ↓

  "name": "bob",
  title: {type: String, required: true},  // here we create an type Object cause of the {}              
  price: {type: Number, required: true},
  description: {type: String, required: true},
  imageUrl: {type: String, required: true}
});   



.save -> to safe a document into a colletion (or adding it)




CRUD by mongoose
________________

C
R
U
D .findByIdAndRemove(prodId)           // "delete by mongoose"


.select()       ->
.populate()     ->
.method         -> userSchema.methods.addToCart = function() {     with .methods (Object) allows us to add our own methods, by simply adding them

                                                                                    
                                                                                   
