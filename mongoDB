REAL DATABASE SERVER - 48
BUILDING A CONNECTION - 95
THEORY - 131
LOCAL DATABASE - 152
HOW TO INPUT -> STRORING IN DB -> DISPLAYING DATA FROM DB - 173
CRUD - DOCS Overview  - 185

MONGOOSE - 236
CREATING A SCHEMA - 286
CREATING A MODEL - 334
CRUD by mongoose - 357

**********************



mongoDB 

- is a NoSQL Database
- no relational Database -> its a document database
- recommended, if there is one user generating many posts etc. like Instagram and so one..
- uses BSON dataformat 




          USAGE
          _____

REMOTE
______

- REMOTE (CLOUD) DATABASE  -> ATLAS -> https://account.mongodb.com/account/login?signedOut=true
- mongoDB GUI -> Compass App

- DB ACCESS settings FROM ANYWHERE -> 0.0.0.0/0 -> add to IP Access List under Security Settings in the Cluster



LOCAL  (OPTIONAL)
_____

mongo shell installation
________________________

https://brew.sh/

in terminal: 
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

needs around 5min!

IF THERE IS AN ERR -> --all --install --force



          REAL DATABASE SERVER
          ____________________

npm i --save mongodb

1.  GO TO NORMAL WEBSITE AND REFRESH IP -> https://cloud.mongodb.com/v2/6376945c84680d511f6cba8f#security/network/accessList
1.1 Press RESUME and wait
2.  CONNECT -> https://cloud.mongodb.com/v2/6376945c84680d511f6cba8f#clusters -> CONNECT BUTTON -> CONNECT WITH APP 

NOTE: access possibilities are changing by time due to the website
-> we need a code to connect like this: mongodb+srv://Tobias:<password>@cluster0.aisrby5.mongodb.net/
                                        mongodb+srv://Tobias:1234567899@cluster0.aisrby5.mongodb.net/


in app.js:

OLD
require("dotenv").config(); // accessing the secret keys

NEW
const dotenv = require('dotenv');
dotenv.config({ path: './config.env' });



// MIDDLEWARES
app.use(express.json()); // for db communication & connection


create a .env file

ADD:

MONGODB_URL=mongodb+srv://Tobias:<password>@cluster0.aisrby5.mongodb.net/    NOTE: NO '' -> cause Key Value Pairs
->                                   ⬆️ FILL THIS OUT
->         =mongodb+srv://Tobias:XXXXXXXXX@cluster0.aisrby5.mongodb.net/
                         without the <> !!!

                                                                                        
3. CONNECT WITH MONGODB COMPASS -> THE APP 




          BUILDING A CONNECTION
          _____________________

app.js file:

const mongoConnectImport = require("./db/database.js"); // mongodb connection

mongoConnectImport((client) => {
  console.log(client);
  app.listen(3000);
});

db file:

const mongodb = require("mongodb");
const Client = mongodb.MongoClient;

const mongoConnect = (callback) => {
  Client.connect(
    "mongodb+srv://Tobias:GlGyWZKyJIVw7LXA@cluster0.aisrby5.mongodb.net/"
  )
    .then((client) => {
      console.log("CONNECTED");
      callback(client);
    })
    .catch((err) => {
      console.log(err);
    });
};

module.exports = mongoConnect;




          THEORY
          ______
      
- NoSQL Database is using COLLECTIONS
             |
          Documents
          { name: 'Max'. age: 28 }
          { name: 'Paul' }              => Documents with different structure in the same Document
          
- Does not have a strict Data Shema (No Structure required)
- No Data Relations


Horizontal vs Vertical Scaling

- NoSQL is really good with horizontal scaling




          LOCAL DATABASE
          ______________

Community Server      https://www.mongodb.com/try/download/community

1. npm install --save mongodb

2. const { MongoClient } = require('mongodb');


  in TERMINAL:
  
3. go to the correct PATH -> cd /usr/local/mongodb/bin

4. in the correct PATH where mongod is ---> sudo ./mongod --dbpath db/




          HOW TO INPUT -> STRORING IN DB -> DISPLAYING DATA FROM DB
          _________________________________________________________     
      
input get, input storing in database, input get/fetch from database

Fester 1: Input -> post req -> save() in db -> res 201

Fenster 2: Input -> get req -> find() in db -> return (data) + 200




          CRUD - DOCS Overview            
          ____________________

https://www.mongodb.com/docs/manual/crud/

depending on the problem, we use crud on the server (more automatic stuff like)
                    ... , we use crud with the terminal (more manual stuff like)


CREATE
db.collection.insertOne({}) -> will create One element
db.collection.insertMany({}) -> will create many element

READ                                lektion 329
db.collection.find() -> whole collection
db.collection.findById() -> single data entry

          NOTE:
          in mongodb id => _id  -> see EXAMPLE BELOW

UPDATE
db.collection.updateOne() -> will update one element
db.collection.updateMany() -> will update multiple elements


EXAMPLE:
dbOp = db.collection('prodcuts').updateOne({ _id: new mongodb.ObjectId(this._id) }, { $set: this });
                                                                                          ↑
                                                                                    DESCRIPE THE OPERATION we want to make

DELETE
db.collection('products').deleteOne();
db.collection('products').deleteMany({}); ??
.deleteMany();


                                                                                    
$set  The $set operator replaces the value of a field with the specified value.
$in   is a query operator -> Matches any of the values specified in an array.




          VALIDATION
          __________      
      
assert




          MONGOOSE
          ________

- mongoose is all about model
- Mongoose is the same for MongoDb like Sequelize for MySQL
- tries to enable to work with the data instead of the queries
- Is an ODM -> a Object-Document Mapping Library for mongoDb

npm i mongoose@5 -> stable version


app.js file:

const mongoose = require('mongoose');
?? require("./db/database");


COPY PASTE:
// = MongoClient constructor
mongoose.connect(DB, {
  useNewUrlParser: true,
  useCreateIndex: true,
  useFindAndModify: false,
  useUnifiedTopology: true
}).then(con => {
  console.log(con.connections);
  console.log('DB Connection successful!');
});


mongoose.set('strictQuery', true);  // line from error warning



db file:

const dbURL =
  "mongodb+srv://Tobias:GlGyWZKyJIVw7LXA@cluster0.aisrby5.mongodb.net/";
// require(db);


mongoose
  .connect(dbURL)
  .then(() => console.log("CONNECTED"))
  .catch((err) => console.log(err));



CREATING A SCHEMA
_________________

const Schema = mongoose.Schema;      // = constructor
const Schema = new mongoose.Schema({}); // Schema Object 


MOST SIMPLE SCHEMA:

const Schema = new mongoose.Schema({
  name: String,
  rating: Number,
  price: Number
});


WITH SCHEMA TYPE OPTIONS:

const tourSchema = new mongoose.Schema({
  name: {           // OPTION SCHEMA
    type: String,
    required: [true, 'A Tout must have a name'] // in [] -> is the err message
  },
  rating: Number,
  price: {
    type: Number,
    required: [true, 'A Tout must have a price']
  }
});



  // we discribe the data-schema, how the product should look like -> with key-value pairs!
  // KEYS  TYPE  (= PAIR)
  // ↓      ↓

  name: "bob",
  title: {type: String, required: true},  // here we create an type Object cause of the {}              
  price: {type: Number, required: true},
  description: {type: String, required: true},
  imageUrl: {type: String, required: true}
});   



.save -> to safe a document into a colletion (or adding it)



CREATING A MODEL
________________

// creaing a MODEL out of the SCHEMA
const Tour = mongoose.model('Tour'); -> is a convention to write models (ans var names) in uppercase!

// created a new document out of the new Tour Model
const testTour = new Tour({
  name: 'The Forest Hyker 2', 
  rating: 4.7, 
  price: 497
});

testTour.save()
  .then(doc => {
    console.log(doc);
    })
    .catch(err => {
    console.log('ERROR 🙅‍♂️:', err)
  });



CRUD by mongoose
________________

C .create()
R .findById()
U .findByIdAndUpdate()
D .findByIdAndDelete() 
  .deleteMany()


.find()          -> will find all data -> is returning a query!                                                                            ⬇️ filter starts with ?.... and  the this key value pair syntax
.find(req.query) -> BEFORE we have to declare our query we want to "filter" in POSTMAN -> localhost:8000/api/v1/tours?duration=5&difficulty=easy
.select()        ->
.populate()      ->
.method          -> userSchema.methods.addToCart = function() {  with .methods (Object) allows us to add our own methods, by simply adding them


___________

.sort          -> to sort in oposite direction we use - minus   -> this is excluding: useful for not showing passwords to the cliet for example
limiting fields (= requesting just some of the fields)



ANALISING (often used)
_________




          AGGREGATION PIPELINE (interesting and useful)
          ____________________

lecture: 102
          
https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/



STAGES
______

$match
$unwind
$sort
$limit
$group



* REAL BUSINESS PROBLEM (LIKE A FORECAST)
_________________________________________

lecture: 103


STAGE:

$unwind -> to deconstruct an array field from the info documents -> and then output one document for each element of the array




          VIRTUAL PROPERTIES
          __________________

= Fields we can define on our schema (which are not will be saved into our database)
-> to saved some space

like a conversion from miles to km/h -> this makes no sense to safe it into the db


EXAMPLE:

const mongoose = require('mongoose');

const tourSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'A Tour must have a name'],
    unique: true,
    trim: true
  },
  imageCover: {
    type: String,
    requiered: [true, 'A tour must have a cover image']
  },

// WE HAVE TO ADD THIS TO OUR SCHEMA !!!
  {
    toJSON: { virtuals: true},
    toObject: { virtuals: true}
  }
);

tourSchema.virtual('durationWeeks').get(function() { // when using this keyword -> we use a regular and NO arrow function!
  return this.duration / 7; // cause there a 7 days in a week
});



MONGOOSE MIDDLEWARE aka "HOCS" (pre save hoc , pre save middleware)
___________________

Documents Middleware:

-> with 'save' HOOK
-> runs ONLY before the .save() and .create() command (thats the "HOOK") -> NOT .insert() .findOne ... for example!#


tourSchema.pre('save', function(next) {
  this.slug = slugify(this.name, {lower: true});
  next();
});



Query Middleware:

-> with 'find' HOOK
-> allows us to run functions before or after a certain query is executed



                                                                                   
