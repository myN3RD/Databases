re       di          s
Re mote  Di ctionary S erver



NoSQL Database
TOP Use Cases:

- Caching (data)
- share user session data across servers
- distributed locks
- atomic counters (great for API trottling)
- sorted sets

redis helps us scale, track, coordinate and cache

- doing real-time analytics
- networking



          START/STOP REDIS
          ________________

go to terminal on mac

start: redis-server
stop: Ctrl-C


!!! open new terminal 


          CONNECT/SHUTDOWN  REDIS SERVER
          ______________________________

NOTE: we can connect as many connections to the server as we want




command: redis-cli 



in the  main terminal we see -> ...
                              Port: 6379
                              ...


in the second terminal tab we see -> (after running) redis-cli -> 127.0.0.1:6379      -> 6379 is identical, means we are connected

- we can test this with typing   ping

- we get a PONG back


-cmd: quit

          "DISCONNECT"
command:  shutdown nosave
          shutdown save




          COMMANDS
          ________

https://redis.io/docs/latest/commands/


info
info server
info memory
info stats
info replication
info cluster
info keyspace



          The Redis Data Storage
          ______________________

ALL DATA in Redis is built on KEYS

- Is a KEY based data structure
- uses 'Key-Values'
-> a KEY is definned by a value ->  Key = value
          Value can be:
                    - String
                    - List 
                    - Hash
                    - Sets
                    - etc.

!!! Data can only be retrieved by knowing the exact key 



SET a KEY -> set key value
GET a KEY -> get key


Examples:

set name 'Tom'
set name "Tom"

-> OK is the response


DELETE KEYS
___________

del key
(integer) 1

testing:
get key
(nil)


mmutiple del:
del key1 key2 key3



EXISTS
______

exists key
exists key1 key2 key3







