START/STOP REDIS                  -      30
CONNECT/SHUTDOWN  REDIS SERVER    -      40
COMMANDS                          -      75
RENAME A KEY                      -     240



re       di          s
Re mote  Di ctionary S erver


https://www.youtube.com/watch?v=G1rOthIU-uo&ab_channel=Fireship

NoSQL Database
TOP Use Cases:

- Caching (data)
- share user session data across servers
- distributed locks
- atomic counters (great for API trottling)
- sorted sets

redis helps us scale, track, coordinate and cache

- doing real-time analytics
- networking



          START/STOP REDIS
          ________________

go to terminal on mac

start: redis-server
stop: Ctrl-C


!!! open new terminal 


          CONNECT/SHUTDOWN  REDIS SERVER
          ______________________________

NOTE: we can connect as many connections to the server as we want




command: redis-cli 



in the  main terminal we see -> ...
                              Port: 6379
                              ...


in the second terminal tab we see -> (after running) redis-cli -> 127.0.0.1:6379      -> 6379 is identical, means we are connected

- we can test this with typing   ping

- we get a PONG back


-cmd: quit

          "DISCONNECT" A SERVER with SAVE and NOSAVE
command:  shutdown nosave
          shutdown save




          COMMANDS
          ________

https://redis.io/docs/latest/commands/


info
info server
info memory
info stats
info replication
info cluster
info keyspace


KEYSPACES
_________

is similar to db namespaces schemas
-> is means this with schemas [0], [1], [2] etc.

"In my words:"

1. choose the "space" (like the index) :
-> select 0, select 1, select 2 etc

2. set the key value          (sets the key and value to the current choosen index)

3. choose the wanted index -> to get the wanted key value


to list all keys in a index:
keys *


DELETE ALL KEYS in a SPACE
__________________________

NOTE: all with flush be very careful

flashdb


          The Redis Data Storage
          ______________________

ALL DATA (every data-point) in Redis is built on KEYS (is a key)

-> its the way we organise data in redis


- Is a KEY based data structure
- uses 'Key-Values'
-> a KEY is definned by a value ->  Key = value
          Value can be:
                    - String
                    - List 
                    - Hash
                    - Sets
                    - etc.

!!! Data can only be retrieved by knowing the exact key 



SET a KEY -> set key value
GET a KEY -> get key


Examples:

set name 'Tom'
set name "Tom"

-> OK is the response


DELETE KEYS
___________

del key
(integer) 1

testing:
get key
(nil)


mmutiple del:
del key1 key2 key3



EXISTS
______

exists key
exists key1 key2 key3



          EXPIRATION OPTION FOR KEYS
          __________________________

NOTE: by default keys will never expire ("so they live forever")

set key value ex <- now the seconds (ex is seconds)
              px <- (px is milliseconds)

to check: ttl key                    (ttl => time to live)
          pttl key           -> when using px


DELETE EXPIRATION
_________________

persist key


NAMING CONVENTIONS
__________________

Object-id:id

user:100
user:100:group
user:100:friends


Example:
________

set user:100 Adam
set user:101 Amy
set user:102 Ben

set user:100:group HR
set user:101:goup SALES

set user:100:friend TOM
set user:101:firends JOHN



          SEARCHING/MATCHING FUNCTION
          ___________________________

NOTE:

KEYS command ->
ONLY use in production, when having a large db!

h?llo matches hello, hallo and hxllo
h*llo matches hllo and heeeelo
h[ae]llo matches hello and hallo - but NOT hillo
h[a-z]llo -> this is really useful
h[^e]llo matches hallo, hpllo - but NOT hello


WHERE THE MAGIC HAPPENS:
user* -> gives us all the users



          RENAME A KEY
          ____________

command:
RENAME key newkey

NOTE: if a key exists already it will be overwritten

-> means its good to know if a key exists or not













